@{
    ViewData["Title"] = "Lets chat!";
}
<div class="content">
    <div class="row"><label>Users Online:&nbsp;</label><label id="usersCount"></label></div>
    <div class="row chattable-row">
        <div class="col-md-2 chattable-col" id="userlist">
            <!--Sidebar content-->
            <ul id="usersOnline" class="chat-list">

            </ul>
        </div>
        <div class="col-md-8 chattable-col chatbox" id="discussion">
            <ul id="discussion" class="chat-list"></ul>
        </div>
    </div>
    <div class="row">
        <div class="col-md-2"></div>
        <div class="col-md-8 chatbox" id="chatinput">
            <div class="form-inline">
                <input type="text" id="message" class="form-control" />
                <input type="button" id="sendmessage" value="Send" class="btn btn-default" />
                <input type="hidden" id="displayname" />
            </div>
        </div>
        </div>

</div>
@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/lib/signalr/jquery.signalR.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        $(function () {
            // Handle submit on enter keypress
            $('#message').keypress(function (e) {
                var key = e.which;
                if (key == 13)  // the enter key code
                {
                    $('#sendmessage').click();
                    return false;
                }
            });

            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.ChatHub;
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message) {
                // Add the message to the page.
                $('#discussion ul').append('<li><strong>' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');
                // Scroll to always show the most recent discussion item
                $('ul#discussion').scrollTop($('ul#discussion')[0].scrollHeight);
            };

            // Get the user name and store it to prepend to messages.
            $('#displayname').val(prompt('Enter your name:', ''));

            // Set initial focus to message input box.
            $('#message').focus();

            // Create a function that the hub can call back to display user count.
            chat.client.updateUsersOnlineCount = function (count) {
                // Add the count to the page.
                $('#usersCount').text(count);
            };

            // Create a function that the hub can call back to display messages.
            chat.client.getOnlineUsers = function (data) {

                $('#usersOnline').empty();
                // Add the message to the page.
                $.each(data, function (index, value) {
                    $('#usersOnline').append('<li>' + value + '</li>');
                });
            };

            // Start the connection.
            $.connection.hub.start().done(function () {
                chat.server.subscribe(htmlEncode($('#displayname').val()));

                $('#sendmessage').click(function () {
                    // Call the Send method on the hub.
                    chat.server.send(htmlEncode($('#displayname').val()), htmlEncode($('#message').val()));
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });
            });
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>
}
